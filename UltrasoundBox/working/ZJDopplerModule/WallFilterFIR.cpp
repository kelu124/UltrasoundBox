#include "stdafx.h"
#include "WallFilterFIR.h"

 int HPF1Len = 128;
 double HPF1[128] = {
	 0.0003418157022061, 0.0003789484222079, 0.0004138113099041, 0.0004459906089115,
	 0.0004743894861197, 0.0004971928102843, 0.0005118832578725, 0.0005153116066841,
	 0.0005038214573038, 0.000473425875856, 0.0004200306955049, 0.0003396965691559,
	 0.0002289294512399, 8.498711560547e-005, -9.38123081797e-005, -0.0003077948893841,
	 -0.0005556641415246, -0.0008342784034914, -0.001138486980265, -0.001461038186896,
	 -0.001792570333687, -0.002121694019401, -0.002435170947874, -0.002718190958863,
	 -0.00295474519223, -0.003128089425896, -0.003221287791988, -0.003217823435745,
	 -0.003102259389977, -0.002860930138657, -0.002482642168561, -0.001959360372186,
	 -0.001286856561448, -0.0004652966482462, 0.0005002557128816, 0.001599439027232,
	 0.002816314267423, 0.004129218377347, 0.005510758816021, 0.006927951199972,
	 0.008342495507896, 0.009711178891384, 0.0109863847942, 0.01211667858188,
	 0.01304742874493, 0.013721409083, 0.01407930954439, 0.01406005885769,
	 0.01360082595675, 0.01263651091845, 0.01109844408255, 0.008911854751498,
	 0.005991390692194, 0.002233448451555, -0.002496942633035, -0.008389037550418,
	 -0.01572806894878, -0.02497571665471, -0.0369384286535, -0.05315990742666,
	 -0.07698565880635, -0.1171808066524, -0.2060155561588, -0.6343631979225,
	 0.6343631979225, 0.2060155561588, 0.1171808066524, 0.07698565880635,
	 0.05315990742666, 0.0369384286535, 0.02497571665471, 0.01572806894878,
	 0.008389037550418, 0.002496942633035, -0.002233448451555, -0.005991390692194,
	 -0.008911854751498, -0.01109844408255, -0.01263651091845, -0.01360082595675,
	 -0.01406005885769, -0.01407930954439, -0.013721409083, -0.01304742874493,
	 -0.01211667858188, -0.0109863847942, -0.009711178891384, -0.008342495507896,
	 -0.006927951199972, -0.005510758816021, -0.004129218377347, -0.002816314267423,
	 -0.001599439027232, -0.0005002557128816, 0.0004652966482462, 0.001286856561448,
	 0.001959360372186, 0.002482642168561, 0.002860930138657, 0.003102259389977,
	 0.003217823435745, 0.003221287791988, 0.003128089425896, 0.00295474519223,
	 0.002718190958863, 0.002435170947874, 0.002121694019401, 0.001792570333687,
	 0.001461038186896, 0.001138486980265, 0.0008342784034914, 0.0005556641415246,
	 0.0003077948893841, 9.38123081797e-005, -8.498711560547e-005, -0.0002289294512399,
	 -0.0003396965691559, -0.0004200306955049, -0.000473425875856, -0.0005038214573038,
	 -0.0005153116066841, -0.0005118832578725, -0.0004971928102843, -0.0004743894861197,
	 -0.0004459906089115, -0.0004138113099041, -0.0003789484222079, -0.0003418157022061
};

 int HPF2Len = 128;
 double HPF2[128] = {
	 8.129147605775e-005, 0.0001098157736228, 0.0001351162326604, 0.0001518607882592,
	 0.00015420701545, 0.0001364112662865, 9.356312385064e-005, 2.238513168016e-005,
	 -7.798012982987e-005, -0.0002052857617606, -0.000353693624266, -0.0005135743990966,
	 -0.0006716691639231, -0.0008116618937102, -0.0009151783666011, -0.0009631864129854,
	 -0.0009377284649276, -0.0008238738212466, -0.000611739245843, -0.0002983968168017,
	 0.0001105286712988, 0.0005997707784277, 0.001144021003182, 0.001708360068841,
	 0.002249609519038, 0.002718622794253, 0.003063455190776, 0.003233267914339,
	 0.003182739731215, 0.002876687848588, 0.002294544827185, 0.001434306942725,
	 0.0003155664365579, -0.001018731485528, -0.002502105651955, -0.004046138356187,
	 -0.005543950163547, -0.006875509580618, -0.007914594924416, -0.008537085604887,
	 -0.008630133327462, -0.008101661631859, -0.006889574834227, -0.004970033065676,
	 -0.002364174383953, 0.0008572593971674, 0.004571809738525, 0.00860594277846,
	 0.01273846747917, 0.01670649303035, 0.02021338583135, 0.02293782748053,
	 0.02454261696813, 0.02468119838455, 0.02299878650538, 0.01912283005466,
	 0.01263295817578, 0.002989616431062, -0.01062833900207, -0.02971388851945,
	 -0.05749817262929, -0.102574552716, -0.1969975678661, -0.6314530106508,
	 0.6314530106508, 0.1969975678661, 0.102574552716, 0.05749817262929,
	 0.02971388851945, 0.01062833900207, -0.002989616431062, -0.01263295817578,
	 -0.01912283005466, -0.02299878650538, -0.02468119838455, -0.02454261696813,
	 -0.02293782748053, -0.02021338583135, -0.01670649303035, -0.01273846747917,
	 -0.00860594277846, -0.004571809738525, -0.0008572593971674, 0.002364174383953,
	 0.004970033065676, 0.006889574834227, 0.008101661631859, 0.008630133327462,
	 0.008537085604887, 0.007914594924416, 0.006875509580618, 0.005543950163547,
	 0.004046138356187, 0.002502105651955, 0.001018731485528, -0.0003155664365579,
	 -0.001434306942725, -0.002294544827185, -0.002876687848588, -0.003182739731215,
	 -0.003233267914339, -0.003063455190776, -0.002718622794253, -0.002249609519038,
	 -0.001708360068841, -0.001144021003182, -0.0005997707784277, -0.0001105286712988,
	 0.0002983968168017, 0.000611739245843, 0.0008238738212466, 0.0009377284649276,
	 0.0009631864129854, 0.0009151783666011, 0.0008116618937102, 0.0006716691639231,
	 0.0005135743990966, 0.000353693624266, 0.0002052857617606, 7.798012982987e-005,
	 -2.238513168016e-005, -9.356312385064e-005, -0.0001364112662865, -0.00015420701545,
	 -0.0001518607882592, -0.0001351162326604, -0.0001098157736228, -8.129147605775e-005
 };

 int HPF3Len = 80;
 double HPF3[80] = {
	 -0.0007046906668089, -0.0007893130474476, -0.0007628540848105, -0.0005873866573897,
	 -0.0002397143511037, 0.0002809641030973, 0.0009473024629851, 0.001701227448477,
	 0.002455527015083, 0.003100149104496, 0.003513156124516, 0.003575604864084,
	 0.003188953624082, 0.002293032224526, 0.000882236452284, -0.0009825002505379,
	 -0.003168203797315, -0.005472552493334, -0.0076356918499, -0.009361087569181,
	 -0.01034422546199, -0.01030689357748, -0.00903388269108, -0.006408347598922,
	 -0.0024418890746, 0.002704287899568, 0.008709987923075, 0.01509998339358,
	 0.02126117957153, 0.02647073364276, 0.02993027406253, 0.03079787740532,
	 0.02820380789501, 0.02122445756922, 0.008759866847266, -0.01082647808309,
	 -0.04075757523202, -0.08946764318778, -0.1887277108593, -0.6290102612805,
	 0.6290102612805, 0.1887277108593, 0.08946764318778, 0.04075757523202,
	 0.01082647808309, -0.008759866847266, -0.02122445756922, -0.02820380789501,
	 -0.03079787740532, -0.02993027406253, -0.02647073364276, -0.02126117957153,
	 -0.01509998339358, -0.008709987923075, -0.002704287899568, 0.0024418890746,
	 0.006408347598922, 0.00903388269108, 0.01030689357748, 0.01034422546199,
	 0.009361087569181, 0.0076356918499, 0.005472552493334, 0.003168203797315,
	 0.0009825002505379, -0.000882236452284, -0.002293032224526, -0.003188953624082,
	 -0.003575604864084, -0.003513156124516, -0.003100149104496, -0.002455527015083,
	 -0.001701227448477, -0.0009473024629851, -0.0002809641030973, 0.0002397143511037,
	 0.0005873866573897, 0.0007628540848105, 0.0007893130474476, 0.0007046906668089
 };

CWallFilterFIR::CWallFilterFIR()
{
	m_filter[0].filter = HPF1;
	m_filter[0].order = HPF1Len;
	m_filter[1].filter = HPF2;
	m_filter[1].order = HPF2Len;
	m_filter[2].filter = HPF3;
	m_filter[2].order = HPF3Len;
}


CWallFilterFIR::~CWallFilterFIR()
{
}

int CWallFilterFIR::ConvComplex1D(double *src, double *filter, double *dest, int len, int order)
{
	//memcpy(dest, src, len*sizeof(double));
	memset(dest, 0, len*2*sizeof(double));
	int horder = order >> 1;
	if (order % 2 == 0)//偶数
	{
		if (len > order)//filter长度小于src长度
		{
			for (int i = 0; i < len; i += 2)
			{
				for (int j = 0; j < order; j++)
				{
					int m = i - 2 * horder + 2 * j;
					if (m>0 && m < len)
					{
						//dest[i] += src[(i-2*horder+2*j)]*filter[j];
						//dest[i+1] += src[(i-2*horder+2*j)+1]*filter[j];
						dest[i] += (src[(i - 2 * horder + 2 * j)] + src[(i - 2 * horder + 2 * j) + 2])*filter[j] / 2;
						dest[i + 1] += (src[(i - 2 * horder + 2 * j) + 1] + src[(i - 2 * horder + 2 * j) + 3])*filter[j] / 2;
					}
				}
			}

		}
		else
		{

		}
	}
	else//奇数
	{
		if (len > order)//filter长度小于src长度
		{
			for (int i = 0; i < len; i += 2)
			{
				for (int j = 0; j < order; j++)
				{
					int m = i - 2 * horder + 2 * j;
					if (m>0 && m < len)
					{
						dest[i] += src[(i - 2 * horder + 2 * j)] * filter[j];
						dest[i + 1] += src[(i - 2 * horder + 2 * j) + 1] * filter[j];
					}

				}
			}

		}

	}
	_WriteDoubleSignal(".\\beforehpfsignal.pgm", src, len);
	_WriteDoubleSignal(".\\afterhpfsignal.pgm", dest, len);
	return 0;

}

int CWallFilterFIR::ConvComplex1D2(double *src, double *filter, double *dest, int len, int order)
{
	int horder = order >> 1;
	int tmp = order & 1;//order%2;取余

	double sum1;
	double sum2;

	int m;
	int n;

	m = 0;
	n = 0;

	if (tmp == 0)//偶数
	{
		if (len > order)//filter长度小于src长度
		{
			for (int i = 0; i < len; i += 2)
			{
				sum1 = 0;
				sum2 = 0;
				n = i - 2 * horder;
				for (int j = 0; j < order; j++)
				{
					m = n + 2 * j;
					if ((m >= 0) && (m < len - horder))
					{
						sum1 += (src[m] + src[m + 2])*filter[j];// /2;
						sum2 += ((src[m + 1] + src[m + 3])*filter[j]);// /2;
					}
					else if ((m >= len - horder) && m < len)//超出数组范围的数置0
					{
						sum1 += src[m] * filter[j];// /2;
						sum2 += src[m + 1] * filter[j];// /2;
					}
					dest[i] = sum1;
					dest[i + 1] = sum2;
				}
			}

		}
	}
	else//奇数
	{

		if (len > order)//filter长度小于src长度
		{
			for (int i = 0; i < len; i += 2)
			{
				sum1 = 0;
				sum2 = 0;
				n = i - 2 * horder;
				for (int j = 0; j < order; j++)
				{
					int m = n + 2 * j;//i-2*horder+2*j;//数组src中与filter[j]进行卷积的点
					if (m>0 && m < len)
					{
						sum1 += src[m] * filter[j];
						sum2 += src[m + 1] * filter[j];
					}
					dest[i] = sum1;
					dest[i + 1] = sum2;
				}

			}

		}

	}
	_WriteDoubleSignal(".\\beforehpfsignal.pgm", src, len);
	_WriteDoubleSignal(".\\afterhpfsignal.pgm", dest, len);
	return 0;
}

int CWallFilterFIR::ConvComplex1D(double *src, double *dest, int len, int filternum)
{
	return ConvComplex1D2(src, m_filter[filternum].filter, dest, len, m_filter[filternum].order);
}
